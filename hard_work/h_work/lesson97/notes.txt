1) генерико-подобные абстракции - выражают абстрактные свойства.

ооп - реализуем тип ISumable, выражаем свойство суммирования по обобщенным типам.
фп - реализуем тип hashable, выражаем свойство "хэшируемости".

2) генерико-подобные абстракции - спецификации бессрочны.

в ооп и фп - реализуем тип IEquatable, свойство сравнения - универсальное понятие.

3) генерико-подобные абстракции - используются для идентификации идиом (не буквальный смысл).

ооп - реализуем интерфейс IGetQuery, выражаем общий шаблон запроса. 
фп - монада maybe для композиции цепочки вычислений.

4) генерико-подобные абстракции - статическая типизация.

ооп - гибкость структуры данных с типобезопасностью; 
фп - выражаем универсальные и чистые (pure) функции с типобезопасностью;

5) генерико-подобные абстракции - полиморфизм времени компиляции.

ооп и фп - определяем конкретные типы на этапе компиляции (параметрический полиморфизм).

6) генерико-подобные абстракции - механизм генерализации.

ооп - генерализация сравнения по типу.
фп - генерализация по шаблону вычисления.

7) Интерфейсо-подобные абстракции - выражают понятия предметной области.

ооп - обычный интерфейс получения форм бизнеса по коду страну.
фп - абстракция функции (как делегаты в .net).

8) Интерфейсо-подобные абстракции - реализации имеют срок действия.

ооп - получаем конкретную имплементацию с помощью паттерна фабрика.
фп - используем алгебраический тип данных.

9) Интерфейсо-подобные абстракции - используются для конструирования паттернов.
 
ооп - паттерн декоратор через интерфейс.
фп - паттерн декоратор через композицию.

10) Интерфейсо-подобные абстракции - динамическая реализация (рантайм).

ооп - выбираем имплементацию отправителя смс из конфига.
фп - выбираем имплементацию логгера на основе env-переменной.

11) Интерфейсо-подобные абстракции - динамический полиморфизм.

ооп - интерфейс для паттерна стратегия.
фп - стратегия через параметризацию функцией.

12) Интерфейсо-подобные абстракции - механизм инкапсуляции.

ооп - инкапсулируем логику клиента через интерфейс (реализация может быть http, grpc, что угодно).
фп - используем шаблон функции в типе.

Итого - поскольку мало работал с фп, часть примеров, кажется, не попала в ожидаемое описание.
Генерико-подобные абстракции - долговечны, типобезопасны и могут быть использованы для построения инфраструктурной, алгоритмической обвязки. 
Интерфейсно-подобные абстракции - более привычны для построения модулей в бизнес-логике, поскольку инкапсулируют поведение и легко могут быть заменены.
